#!/bin/bash

# Linuxium's script to create a bootable SD card with Linux for RK3288 devices

if [[ $EUID -ne 0 ]]; then
    echo "This script has to run as root"
    exit
fi

SDCARD="/dev/sdb"

WORKING_DIR=`pwd`
TOOLS_DIR=${WORKING_DIR}/Tools

RKCRC=${TOOLS_DIR}/rkcrc
SDBOOT=${TOOLS_DIR}/sdboot_rk3288.img

BOOT_PARTITION=false
KERNEL_PARTITION=false
RESOURCE_PARTITION=false

PARAMETER_FILE=parameter-linux
PARAMETER_IMAGE=parameter-linux.img
BOOT_IMAGE=boot-linux.img
KERNEL_IMAGE=kernel-linux.img
RESOURCE_IMAGE=resource-linux.img
LINUX_RFS=rootfs.tar.bz2
RFS_DIR=rootfs

CTRL_C()
{
	cd ${WORKING_DIR}
	echo
	echo "Linux SD card creation interrupted ... exiting."
	exit
}

ERROR()
{
	cd ${WORKING_DIR}
	ERROR_MESSAGE=$*
	echo
	echo "${ERROR_MESSAGE} ... exiting."
	exit
}

START()
{
	cd ${WORKING_DIR}
	if [ $# -ne 0 ]; then
		ERROR "Usage: '$0'"
	fi
	if [ ! -f "${PARAMETER_FILE}" ]; then
		ERROR "Linux file '${PARAMETER_FILE}' not found"
	fi
	if [ ! -f "${BOOT_IMAGE}" ]; then
		ERROR "Linux image '${BOOT_IMAGE}' not found"
	fi
	if [ ! -f "${KERNEL_IMAGE}" ]; then
		ERROR "Linux image '${KERNEL_IMAGE}' not found"
	fi
	if [ ! -f "${RESOURCE_IMAGE}" ]; then
		ERROR "Linux image '${RESOURCE_IMAGE}' not found"
	fi
	if [ ! -f "${LINUX_RFS}" ]; then
		ERROR "Linux image '${LINUX_RFS}' not found"
	fi
	if [ ! -f ${RKCRC} ]; then
		ERROR "Missing system tool '${RKCRC}'"
	fi
	if [ ! -f ${SDBOOT} ]; then
		ERROR "Missing bootloader image '${SDBOOT}'"
	fi
	NECESSARY=true
	while ${NECESSARY}; do
		echo -n "Is your SD card loaded as '${SDCARD}' (y/n)? "
		read -n 1 ANSWER
		echo
		if [ "${ANSWER}" = "y" ]; then
			if [ ! -b "${SDCARD}" ]; then
				ERROR "Device '${SDCARD}' not found"
			else
				break
			fi
		else
			echo -n "Do you want to use a different device? "
			read -n 1 ANSWER
			echo
			if [ "${ANSWER}" = "y" -o -z "${ANSWER}" ]; then
				echo -n "Enter new device name? "
				read SDCARD
			else
				ERROR "Linux SD card creation terminated"
			fi
		fi
	done
	echo -n "Unmounting partitions on '${SDCARD}' ... "
	umount ${SDCARD}?
	echo
	echo "done."
	echo
}

FLASH_BOOTLOADER_TO_SDCARD()
{
	echo -n "Formatting SD card '${SDCARD}' ... "
	cd ${WORKING_DIR}
	sgdisk -Z ${SDCARD}
	echo
	echo "done."
	echo
	echo -n "Flashing bootloader '`basename ${SDBOOT}`' to '${SDCARD}' ... "
	dd if=${SDBOOT} of=${SDCARD} conv=sync,fsync
	echo
	echo "done."
	echo
	echo -n "Updating partition table on '${SDCARD}' ... "
	sgdisk -og ${SDCARD}
	echo
	echo "done."
	echo
}

FLASH_LINUX_OS_TO_SDCARD()
{
	cd ${WORKING_DIR}
        echo -n "Creating '${PARAMETER_IMAGE}' from '${PARAMETER_FILE}' ... "
        PARAMETER_IMAGE_CREATED=false
        rm -rf ${PARAMETER_IMAGE}
        ${RKCRC} -p ${PARAMETER_FILE} ${PARAMETER_IMAGE} && PARAMETER_IMAGE_CREATED=true
        echo
        echo "done."
        echo
        if ${PARAMETER_IMAGE_CREATED}; then
		echo -n "Flashing parameter '${PARAMETER_IMAGE}' to '${SDCARD}' ... "
		dd if=${PARAMETER_IMAGE} of=${SDCARD} conv=sync,fsync seek=$((0x2000))
        echo
		echo "done."
        echo
        else
                ERROR "Cannot create '${PARAMETER_IMAGE}'"
        fi
	echo -n "Flashing boot '${BOOT_IMAGE}' to '${SDCARD}' ... "
	dd if=${BOOT_IMAGE} of=${SDCARD} conv=sync,fsync seek=$((0x2000+BOOT_START_PARTITION))
    echo
	echo "done."
    echo
	echo -n "Flashing kernel '${KERNEL_IMAGE}' to '${SDCARD}' ... "
	dd if=${KERNEL_IMAGE} of=${SDCARD} conv=sync,fsync seek=$((0x2000+KERNEL_START_PARTITION))
    echo
	echo "done."
    echo
	echo -n "Flashing resource '${RESOURCE_IMAGE}' to '${SDCARD}' ... "
	dd if=${RESOURCE_IMAGE} of=${SDCARD} conv=sync,fsync seek=$((0x2000+RESOURCE_START_PARTITION))
    echo
	echo "done."
    echo
}

CREATE_PARTITIONS_ON_SDCARD()
{
	echo -n "Calculating partition size for '${SDCARD}' ... "
    echo
	cd ${WORKING_DIR}
	for PARTITION in `cat ${PARAMETER_FILE} | grep '^CMDLINE' | sed 's/ //g' | sed 's/.*:\(0x.*[^)])\).*/\1/' | sed 's/,/ /g'`; do
	PARTITION_NAME=`echo ${PARTITION} | sed 's/\(.*\)(\(.*\))/\2/'`
    echo $PARTITION_NAME
	START_PARTITION=`echo ${PARTITION} | sed 's/.*@\(.*\)(.*)/\1/'`
    echo "Start : $START_PARTITION"
	LENGTH_PARTITION=`echo ${PARTITION} | sed 's/\(.*\)@.*/\1/'`
    echo "Length: $LENGTH_PARTITION"
		case ${PARTITION_NAME} in
			"boot")
					BOOT_PARTITION=true
			BOOT_START_PARTITION=${START_PARTITION}
			BOOT_LENGTH_PARTITION=${LENGTH_PARTITION}
					;;
			"kernel")
					KERNEL_PARTITION=true
			KERNEL_START_PARTITION=${START_PARTITION}
			KERNEL_LENGTH_PARTITION=${LENGTH_PARTITION}
					;;
			"resource")
					RESOURCE_PARTITION=true
			RESOURCE_START_PARTITION=${START_PARTITION}
			RESOURCE_LENGTH_PARTITION=${LENGTH_PARTITION}
					;;
			*)
					;;
		esac
	done
	for PARTITION in BOOT KERNEL RESOURCE
	do
	eval PARTITION_EXISTS=${PARTITION}_PARTITION
	if ! ${!PARTITION_EXISTS}; then
	ERROR "Linux's parameter file missing '`echo ${PARTITION} | tr '[:upper:]' '[:lower:]'`' partition definition"
	fi
	done
    echo
	echo "done."
    echo
	PARTITION_NUMBER=1
	PARTITION=LINUX
	START_OF_PARTITION=$(((0x2000+0x2000+BOOT_LENGTH_PARTITION+KERNEL_LENGTH_PARTITION+RESOUCE_LENGTH_PARTITION)*512/1024/1024))
    echo "Start of Linux partition: $START_OF_PARTITION MB"
	echo -n "Creating '`echo ${PARTITION} | tr '[:upper:]' '[:lower:]'`' partition as '${SDCARD}${PARTITION_NUMBER}' on ${SDCARD} ..."
	sgdisk -n ${PARTITION_NUMBER}:${START_OF_PARTITION}M: -t ${PARTITION_NUMBER}:8300 ${SDCARD}
    echo
	echo "done."
    echo
	echo -n "Making 'ext4' file system for '`echo ${PARTITION} | tr '[:upper:]' '[:lower:]'`' partition on '${SDCARD}${PARTITION_NUMBER}' ... "
	mkfs.ext4 -F -L linuxroot ${SDCARD}${PARTITION_NUMBER}
    echo
	echo "done."
    echo
}

FLASH_LINUX_RFS_TO_SDCARD()
{
	echo -n "Extracting Linux RFS '${LINUX_RFS}' to '${SDCARD}${PARTITION_NUMBER}' ... "
	cd ${WORKING_DIR}
    if [ ! -d $RFS_DIR ]; then mkdir $RFS_DIR; fi
    mount ${SDCARD}${PARTITION_NUMBER} $RFS_DIR
    tar jxf $LINUX_RFS -C $RFS_DIR
    sync
    umount $RFS_DIR

    echo
	echo "done."
    echo
}

FINISH()
{
	echo -n "Flushing buffers for '${SDCARD}' ... "
	sync
	sync
    echo
	echo -n "Ejecting '${SDCARD}' ... "
    eject ${SDCARD}
    echo
	echo "done."
    echo
    echo "Linux SD card created on '${SDCARD}'."
}

trap CTRL_C SIGINT

START $*
FLASH_BOOTLOADER_TO_SDCARD
CREATE_PARTITIONS_ON_SDCARD
FLASH_LINUX_OS_TO_SDCARD
FLASH_LINUX_RFS_TO_SDCARD
FINISH
