#!/bin/bash
################################################################################
##
# @file setup.sh
# @date 2016-01-13
# @author Tiago Lobato Gimenes    (tlgimenes@gmail.com)
#
# @copyright Tiago Lobato Gimenes 2015. All rights reserved.
#
# @license GNU Public License version 3
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# @brief
#
#
################################################################################
# Global variables
BIN_DIR=bin
HOME_DIR=`pwd`

################################################################################
# Ramdisk variables
RAMDISK_GIT=https://github.com/TeeFirefly/initrd.git
RAMDISK_DIR=initrd

################################################################################
# Kernel variables
COMPILLING_THREADS=10 # Threads to use during compliation

#for Linux(also Android), 3.10 is the kernel version; 3.14 is for ChromeOS
KERNEL_GIT=https://bitbucket.org/T-Firefly/firefly-rk3288-kernel.git
KERNEL_DIR=firefly-rk3288-kernel
KERNEL_IMG=kernel.img
RESOURCE_IMG=resource.img

KERNEL_DEFCONFIG=firefly-rk3288-linux_defconfig

KERNEL=firefly-rk3288.img
MODULES=modules

MODULES_INSTALL_PATH=modules_install

################################################################################
# Tools variables
MKBOOTIMG_GIT=https://github.com/neo-technologies/rockchip-mkbootimg.git;
MKBOOTIMG_DIR=rockchip-mkbootimg

RK2918_GIT=https://github.com/dayongxie/rk2918_tools.git
RK2918_DIR=rk2918_tools

#old kernel version 3.10 won't work with gcc5 and above
#hence use the arm-eabi-4.6
CROSS_COMPILER_REP=https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/+archive/refs/tags/android-4.4.2_r1.tar.gz
CROSS_COMPILER_DIR=android-4.4.2_r1
CROSS_COMPILER_TAR=android-4.4.2_r1.tar.gz

################################################################################
# Boot image variables
BOOT_IMG_DIR=boot_img
BOOT_IMG_IMG=boot-linux.img
MKBOOTIMG_TOOL=mkbootimg

################################################################################
# Create SDCard variables
CREATE_SDCARD_DIR=create-linux-sdcard
CREATE_SDCARD_BIN=create-linux-sdcard
CREATE_SDCARD_KERNEL_IMG=kernel-linux.img
CREATE_SDCARD_BOOT_IMG=boot-linux.img
CREATE_SDCARD_RESOURCE_IMG=resource-linux.img

################################################################################
setup_tools()
{
    echo 'Setting up tools'
    cd $HOME_DIR
    
    # Create Binaries folder
    if [ ! -d $BIN_DIR ]; then mkdir $BIN_DIR; fi
    cd $BIN_DIR

    # Fetch and install mkbootimg
    if [ ! -d $MKBOOTIMG_DIR ]; then git clone $MKBOOTIMG_GIT $MKBOOTIMG_DIR; fi 
    cd $MKBOOTIMG_DIR
    make
    cd $HOME_DIR/$BIN_DIR

    # Fetch rk2918 tools
    if [ ! -d $RK2918_DIR ]; then git clone $RK2918_GIT $RK2918_DIR; fi
    cd $RK2918_DIR
    make 
    cd $HOME_DIR/$BIN_DIR

    # Dowload ARM eabi cross compilling toolchain
    if [ ! -f $CROSS_COMPILER_TAR ]; then wget $CROSS_COMPILER_REP; fi
    if [ ! -d $CROSS_COMPILER_DIR ]; then mkdir $CROSS_COMPILER_DIR; fi
    tar -zxf android-4.4.2_r1.tar.gz -C android-4.4.2_r1

    cd $HOME_DIR
    source ./source $HOME_DIR $BIN_DIR
    
    cd $HOME_DIR
}

################################################################################
setup_kernel()
{
    echo 'Setting up kernel'
    cd $HOME_DIR

    if [ ! -d $KERNEL_DIR ]; then git clone $KERNEL_GIT $KERNEL_DIR; fi
    cd $KERNEL_DIR

    make $KERNEL_DEFCONFIG
    make -j$COMPILLING_THREADS $KERNEL
    make -j$COMPILLING_THREADS $MODULES

    [ -d $MODULES_INSTALL_PATH ] && rm -rf $MODULES_INSTALL_PATH
    mkdir $MODULES_INSTALL_PATH
    make INSTALL_MOD_PATH=./$MODULES_INSTALL_PATH modules_install
    
    cd $HOME_DIR
}

################################################################################
setup_ramdisk()
{
    echo 'Setting up ramdisk'
    cd $HOME_DIR
    
    if [ ! -d $RAMDISK_DIR ]; then git clone $RAMDISK_GIT $RAMDISK_DIR; fi
    make -C $RAMDISK_DIR

    cd $HOME_DIR
}

################################################################################
setup_boot_img()
{
    echo 'Setting up boot_img'
    cd $HOME_DIR

    [ ! -d $BOOT_IMG_DIR ] && mkdir $BOOT_IMG_DIR
    cd $BOOT_IMG_DIR
    $MKBOOTIMG_TOOL --kernel $HOME_DIR/$KERNEL_DIR/$KERNEL_IMG --ramdisk \
    $HOME_DIR/initrd.img -o $BOOT_IMG_IMG

    cd $HOME_DIR
}

################################################################################
setup_create_sdcard()
{
    echo 'Setting up sdcard'
    cd $HOME_DIR/$CREATE_SDCARD_DIR

    ln -sf $HOME_DIR/$BOOT_IMG_DIR/$BOOT_IMG_IMG ./$CREATE_SDCARD_BOOT_IMG
    ln -sf $HOME_DIR/$KERNEL_DIR/$KERNEL_IMG ./$CREATE_SDCARD_KERNEL_IMG
    ln -sf $HOME_DIR/$KERNEL_DIR/$RESOURCE_IMG ./$CREATE_SDCARD_RESOURCE_IMG

    sudo ./$CREATE_SDCARD_BIN

    cd $HOME_DIR
}

################################################################################
setup_source()
{
    echo 'Setting up paths'
    source ./source $HOME_DIR $BIN_DIR
}

################################################################################
setup_all()
{
    setup_tools
    setup_kernel
    setup_ramdisk
    setup_boot_img
    setup_create_sdcard
}

################################################################################
setup()
{
HELP=\
"usage setup [options]

options:
    tools - to generate the tools and export paths
    kernel - to generate stock kernel
    ramdisk - to generate initial ramdisk image
    boot_img - to generate boot image
    source - to source tool's paths
    create_sdcard - to create sd card
    all - to chain all of the steps and create an sdcard with a working kernel and resource images"

    if [ "$1" == "tools" ]; then setup_tools;
    elif [ "$1" == "kernel" ]; then setup_kernel;
    elif [ "$1" == "ramdisk" ]; then setup_ramdisk;
    elif [ "$1" == "boot_img" ]; then setup_boot_img;
    elif [ "$1" == "source" ]; then setup_source;
    elif [ "$1" == "create_sdcard" ]; then setup_create_sdcard;
    else
        echo "$HELP"
        exit
    fi
}

################################################################################
setup $1

################################################################################
